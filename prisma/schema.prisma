generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String?
  password      String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  avatar        String?
  company       String?
  subscriptions Subscription[]
  autoBrands    AutoBrand[]
  Auto          Auto[]
  Route         Route[]
  Cargo         Cargo[]
  Report        Report[]
  Company       Company[]
}

model Company {
  id                  Int      @id @default(autoincrement())
  name                String?
  email               String?
  code                String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  autos               Auto[]
  isCargoOwner        Boolean  @default(false)
  userId              Int
  user                User     @relation(fields: [userId], references: [id])
  reportForAutoOwner  Report[] @relation("autoOwner")
  reportForCargoOwner Report[] @relation("cargoOwner")
}

model AutoBrand {
  id        Int     @id @default(autoincrement())
  userId    Int?
  user      User?   @relation(fields: [userId], references: [id])
  name      String  @unique
  isDefault Boolean @default(false)
  autos     Auto[]
}

model Auto {
  id          Int        @id @default(autoincrement())
  autoNum     String
  company     Company?   @relation(fields: [companyId], references: [id])
  companyId   Int?
  autoBrand   AutoBrand? @relation(fields: [autoBrandId], references: [id])
  autoBrandId Int?
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  trailNum    String?
  driver      String?
  contact     String?
  license     String?
  notes       String?
}

model Route {
  id       Int      @id @default(autoincrement())
  name     String
  userId   Int
  user     User     @relation(fields: [userId], references: [id])
  distance Int?
  Report   Report[]
}

model Cargo {
  id        Int      @id @default(autoincrement())
  name      String
  isDefault Boolean  @default(false)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  Report    Report[]
}

model Report {
  id           Int       @id @default(autoincrement())
  date         DateTime  @db.Date
  route        Route     @relation(fields: [routeId], references: [id])
  routeId      Int
  cargo        Cargo     @relation(fields: [cargoId], references: [id])
  cargoId      Int
  autoOwner    Company?  @relation("autoOwner", fields: [autoOwnerId], references: [id])
  autoOwnerId  Int?
  cargoOwner   Company?  @relation("cargoOwner", fields: [cargoOwnerId], references: [id])
  cargoOwnerId Int?
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  autoNum      String?
  driver       String?
  rate         Int?
  rateUnits    RateUnits @default(fixed)
  created_at   DateTime  @default(now())
}

enum RateUnits {
  per_mile
  per_weight
  fixed
}

model Subscription {
  id                Int               @id @default(autoincrement())
  subscriptionId    String            @unique
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  plan              SubscriptionPlans
  subscriptionStart DateTime
  subscriptionEnd   DateTime
  trialStart        DateTime?
  trialEnd          DateTime?
}

enum SubscriptionPlans {
  month
  year
}
